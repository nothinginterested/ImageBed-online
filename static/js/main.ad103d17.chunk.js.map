{"version":3,"sources":["Models/index.ts","Store/user.ts","Store/auth.ts","Store/Image.ts","Store/index.ts","Views/Login.tsx","Views/Register.tsx","Views/User.tsx","Views/Upload.tsx","Components/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AV","init","appId","appKey","serverURL","Auth","username","userpassword","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","then","error","logIn","current","logOut","Uploader","fileName","file","item","Object","avFile","File","set","save","serverFile","this","currentUser","observable","action","values","password","console","log","resetUser","newFileName","filename","newFile","serverfile","toJSON","saveCurrentFile","catch","err","finally","window","sessionStorage","setItem","JSON","stringify","xx","getItem","parse","toJS","url","a","computed","context","createContext","AuthStore","UserStore","ImageStore","stores","useStore","useContext","Layout","Content","FormLogin","styled","section","ContentX","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","history","useHistory","style","padding","name","initialValues","remember","onFinish","setUserpassword","login","setUser","e","push","onFinishFailed","errorInfo","Item","label","rules","required","message","placeholder","Password","valuePropName","type","htmlType","FormRegister","div","Register","register","Users","Dragger","Upload","Sectionx","Image","img","UploadX","observer","useEffect","fetchCurrentFile","props","showUploadList","beforeUpload","setFile","setFileName","warning","upload","info","className","InboxOutlined","href","src","Header","LayoutX","location","useLocation","mode","selectedKeys","pathname","key","to","attributes","onClick","logout","background","children","App","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad103d17.chunk.js","sourcesContent":["import AV, {User} from 'leancloud-storage';\n\nAV.init({\n    appId: 'eMi9KzUA9zcTTbPBMkdSK6Dw-gzGzoHsz',\n    appKey: 'jhMHYcxkt8EMAS4IxwlC5RAH',\n    serverURL: 'https://emi9kzua.lc-cn-n1-shared.com'\n});\n\nconst Auth = {\n    register(username: string, userpassword: string) {\n        const user = new User();\n        user.setUsername(username);\n        user.setPassword(userpassword);\n        return new Promise((resolve, reject) => {\n            user.signUp().then(\n                (user) => {\n                    resolve(user);\n                }, (error) => {\n                }\n            );\n        });\n    },\n    login(username: string, userpassword: string) {\n        return new Promise((resolve, reject) => {\n            AV.User.logIn(username, userpassword).then(\n                (user) => {\n                    resolve(user);\n                }, (error) => {\n                    reject(error);\n                });\n\n        });\n\n    },\n    fetchUser() {\n        return AV.User.current();\n    },\n    logout(){\n      AV.User.logOut()\n\n    }\n};\n\n\nconst Uploader = {\n    add(fileName: string, file: any) {\n        const item = new AV.Object('Image');\n        const avFile = new AV.File(fileName, file);\n        item.set('filename', fileName);\n        item.set('owner', AV.User.current());\n        item.set('url', avFile);\n        return new Promise<AV.Object>((resolve, reject) => {\n            item.save().then((serverFile:AV.Object) => resolve(serverFile), error => reject(error));\n        });\n\n\n    }\n};\nexport {Auth, Uploader};\n","import {action, observable} from 'mobx';\nimport {Auth} from '../Models';\nimport AV, {User} from 'leancloud-storage';\n\n\n\nclass userStore {\n    @observable currentUser :AV.User | null =null;\n\n    @action setUser() {\n        this.currentUser = Auth.fetchUser();\n\n    }\n    @action resetUser(){\n        this.currentUser=null\n    }\n\n}\n\n\nexport default new userStore();\n","import React from 'react';\nimport {action, observable} from 'mobx';\nimport {Auth} from '../Models';\nimport user from './user';\ntype TInfo ={\n    username:string,\n    password:string\n\n}\n\nclass AuthStore {\n    @observable values: TInfo = {\n        username: '',\n        password: ''\n    };\n\n    @action setUsername(username: string) {\n        this.values.username = username;\n    }\n\n    @action setUserpassword(password: string) {\n        this.values.password = password;\n    }\n\n    @action register() {\n        return new Promise((resolve, reject) => {\n            Auth.register(this.values.username, this.values.password).then(\n                user => {\n                    console.log('111');\n                }\n            );\n        });\n    }\n\n    @action login() {\n        return new Promise((resolve, reject) => {\n            Auth.login(this.values.username, this.values.password\n            ).then((user) => {\n                resolve(user);\n            }, (error) => {\n                reject(error);\n\n            });\n\n        });\n\n    }\n    @action logout(){\n        Auth.logout()\n        user.resetUser()\n    }\n\n}\n\nexport default new AuthStore();\n","import {action, computed, observable, toJS} from 'mobx';\nimport {Uploader} from '../Models';\nimport AV, {User} from 'leancloud-storage';\nimport { tsModel3 } from '../custom';\n\nclass ImageStore {\n    @observable filename = '';\n    @observable file = null;\n    @observable serverFile: tsModel3 | null= null;\n    @observable saveFile: any={a:'111'};\n\n    @action setFileName(newFileName: string) {\n        this.filename = newFileName;\n    }\n\n    @action setFile(newFile: any) {\n        this.file = newFile;\n    }\n\n    @action upload() {\n        return new Promise((resolve, reject) => {\n            Uploader.add(this.filename, this.file).then(\n                (serverfile: AV.Object) => {\n\n                    this.serverFile = serverfile.toJSON();\n                    this.saveCurrentFile();\n                    resolve(serverfile);\n                }\n            ).catch(err => {\n                reject(err);\n            }).finally(() => {\n            });\n\n        });\n    }\n\n    @action saveCurrentFile() {\n        window.sessionStorage.setItem('_Image', JSON.stringify(this.serverFile));\n    }\n\n    @action fetchCurrentFile() {\n        const xx = window.sessionStorage.getItem('_Image');\n        let file = null;\n        if (xx) {\n            file = JSON.parse(xx);\n\n        }\n        this.serverFile = file;\n\n    }\n    @computed get url(){\n        return toJS(this.serverFile)?.url.url\n    }\n}\n\nexport default new ImageStore();\n","import React, {createContext, useContext} from 'react';\n\nimport AuthStore from './auth';\nimport UserStore from './user'\nimport ImageStore from './Image'\nconst context = createContext(\n    {\n        AuthStore,\n        UserStore,\n        ImageStore\n    }\n);\n(window as any).stores = {\n    AuthStore,\n    UserStore,\n    ImageStore\n};\n\nexport const useStore = () => useContext(context);\n","import React from 'react';\nimport LayoutX from '../Components/Layout';\nimport styled from 'styled-components';\n\nimport {Form, Input, Button, Checkbox, Layout} from 'antd';\nimport {useStore} from '../Store';\nimport {useHistory} from 'react-router';\n\nconst {Content} = Layout;\nconst FormLogin = styled.section`\n      background: white;\n      max-width: 600px;\n      margin: 30px auto;\n      padding: 20px;\n      border-radius: 4px;\n      box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.2);\n\n\n\n`;\nconst ContentX = styled.section`\n      background: white;\n`;\n\nconst layout = {\n    labelCol: {span: 8},\n    wrapperCol: {span: 10},\n};\nconst tailLayout = {\n    wrapperCol: {offset: 8, span: 16},\n};\n\n\nconst Login = () => {\n\n\n    const {AuthStore,UserStore} = useStore();\n    let history = useHistory();\n\n    const onFinish = (values: any) => {\n\n        console.log('Success:', values);\n        AuthStore.setUsername(values.username);\n        AuthStore.setUserpassword(values.password);\n        AuthStore.login().then((user) => {\n            UserStore.setUser()\n\n        }).catch((e)=>{\n        });\n\n        history.push('/');\n\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n            <ContentX style={{padding: '0 50px'}}>\n                <FormLogin>\n                    <Form\n                        {...layout}\n                        name=\"basic\"\n                        initialValues={{remember: true}}\n                        onFinish={onFinish}\n                        onFinishFailed={onFinishFailed}\n\n                    >\n                        <Form.Item\n                            label=\"Username\"\n                            name=\"username\"\n                            rules={[{required: true, message: 'Please input your username!'}]}\n                        >\n                            <Input placeholder='请输入用户名'/>\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Password\"\n                            name=\"password\"\n                            rules={[{required: true, message: 'Please input your password!'}]}\n                        >\n                            <Input.Password placeholder='请输入密码'/>\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                            <Checkbox>Remember me</Checkbox>\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </FormLogin>\n            </ContentX>\n    );\n};\nexport default Login;\n","import React, {forwardRef, Ref} from 'react';\nimport LayoutX from '../Components/Layout';\nimport styled from 'styled-components';\n\nimport {Form, Input, Button, Checkbox, Layout} from 'antd';\nimport {useStore} from '../Store';\nimport {useHistory} from 'react-router';\n\nconst FormRegister = styled.section`\n      background: white;\n      max-width: 600px;\n      margin: 30px auto;\n      padding: 20px;\n      border-radius: 4px;\n      box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.2);\n\n\n\n`;\nconst ContentX = styled.div`\n      background: white;\n`;\n\nconst layout = {\n    labelCol: {span: 8},\n    wrapperCol: {span: 10},\n};\nconst tailLayout = {\n    wrapperCol: {offset: 8, span: 16},\n};\n\n\nconst Register = () => {\n    const {AuthStore} = useStore();\n    let history = useHistory();\n\n    const onFinish = (values: any) => {\n\n        console.log('Success:', values);\n        AuthStore.setUsername(values.username);\n        AuthStore.setUserpassword(values.password);\n        AuthStore.register().then();\n        history.push('/login');\n\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n        <ContentX style={{padding: '0 50px'}}>\n            <FormRegister>\n                <Form\n                    {...layout}\n                    name=\"basic\"\n                    initialValues={{remember: true}}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n\n                >\n                    <Form.Item\n                        label=\"Username\"\n                        name=\"username\"\n                        rules={[{required: true, message: 'Please input your username!'}]}\n                    >\n                        <Input placeholder='请输入用户名'/>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[{required: true, message: 'Please input your password!'}]}\n                    >\n                        <Input.Password placeholder='请输入密码'/>\n                    </Form.Item>\n\n                    <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n                        <Checkbox>Remember me</Checkbox>\n                    </Form.Item>\n\n                    <Form.Item {...tailLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </FormRegister>\n        </ContentX>\n    );\n};\n\nexport default Register;\n","import React from 'react';\nimport LayoutX from '../Components/Layout';\n\nconst Users=()=> {\n    return (\n            <h2>\n                user\n            </h2>\n    )\n}\n\nexport  default Users\n","import React, {useEffect} from 'react';\nimport {Upload, message} from 'antd';\nimport {InboxOutlined} from '@ant-design/icons';\nimport {useStore} from '../Store';\nimport {RcFile} from 'antd/lib/upload';\nimport {observer} from 'mobx-react';\nimport {UploadChangeParam} from 'antd/lib/upload/interface';\nimport styled from 'styled-components';\n\nconst {Dragger} = Upload;\nconst  Sectionx=styled.section`\n  background: #FFF;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  max-width: 50%;\n  margin: 0 auto;\n  border-radius: 4px;\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.2);\n`\nconst Image=styled.img`\n    max-width: 500px;\n`\n\n\n\nconst UploadX = observer(() => {\n    const {ImageStore, UserStore} = useStore();\n\n    useEffect(() => {\n\n        ImageStore.fetchCurrentFile()\n\n    }, []);\n    const props = {\n        showUploadList: false,\n        beforeUpload: (file: RcFile) => {\n            ImageStore.setFile(file);\n            ImageStore.setFileName(file.name);\n            if (UserStore.currentUser === null) {\n                message.warning('还没有登录');\n                return false;\n            }\n            ImageStore.upload().then((serverfile) => {\n                    console.log('上传成功');\n                    message.info('上传成功')\n\n                }\n            ).catch(err => {\n                console.log(err);\n            });\n            return false;\n        }\n    };\n    return (\n        <div>\n            <Dragger {...props}>\n                <p className=\"ant-upload-drag-icon\">\n                    <InboxOutlined/>\n                </p>\n                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                <p className=\"ant-upload-hint\">\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n                    band files\n                </p>\n            </Dragger>,\n            {ImageStore.serverFile&&UserStore.currentUser ?\n\n                <Sectionx>\n                    <h1>上传结果</h1>\n                    <dl>\n                        <dt>线上地址</dt>\n                        <dd><a href={ImageStore.url}/> {ImageStore.url}</dd>\n                        <dt>图片预览</dt>\n                        <dd>\n                            <Image src={ImageStore.url}/>\n                        </dd>\n                    </dl>\n                </Sectionx>\n                : null\n\n            }\n\n\n        </div>\n\n\n    );\n\n});\nexport default UploadX;\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport {Layout, Menu, Button} from 'antd';\nimport {Link, useHistory, useLocation, useParams, withRouter} from 'react-router-dom';\nimport {ClickParam} from 'antd/lib/menu';\nimport {useStore} from '../Store';\nimport {observer} from 'mobx-react';\nimport {observable} from 'mobx';\n\nconst {Header} = Layout;\nconst {Content} = Layout;\nconst header = styled(Header)`\n      background: white;\n`;\nconst LayoutX = observer((props: any) => {\n    let location = useLocation();\n    const {UserStore,AuthStore} = useStore();\n    useEffect(() => {\n        UserStore.setUser();\n    }, []);\n    let current = UserStore.currentUser;\n    const logout=()=>{\n        AuthStore.logout()\n    }\n\n    return (\n        <Layout className='layout'>\n            <header>\n                <div className=\"logo\"/>\n                <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\n                    <Menu.Item key=\"/\">\n                        <Link to=\"/\"> 主页</Link>\n                    </Menu.Item>\n\n                    {current\n                        ? <Menu.Item key=\"/login\">\n                            {current.attributes.username}\n                        </Menu.Item> :\n                        <Menu.Item key=\"/login\">\n                            <Link to=\"/login\">登录</Link>\n                        </Menu.Item>\n\n                    }\n                    {current ? <Menu.Item onClick={logout} key='/logout'>\n                        <span >登出</span>\n                    </Menu.Item> : <Menu.Item key=\"/register\">\n                        <Link to=\"/register\">注册</Link>\n                    </Menu.Item>}\n\n\n                </Menu>\n            </header>\n            <Content style={{background: 'white'}}>\n                {props.children}\n\n            </Content>\n        </Layout>\n    );\n});\nexport default LayoutX;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from 'react-router-dom';\nimport {Button, Layout, Menu} from 'antd';\nimport Login from './Views/Login';\nimport Register from './Views/Register';\nimport Users from './Views/User';\nimport Upload from './Views/Upload';\nimport LayoutX from './Components/Layout';\n\nexport default function App() {\n    return (\n\n        <Router>\n            <div>\n                <LayoutX/>\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n\n                    <Route path=\"/users\">\n                        <Users/>\n                    </Route>\n                    <Route path='/login'>\n                        <Login/>\n                    </Route>\n                    <Route path='/register'>\n                        <Register/>\n                    </Route>\n\n                    <Route path=\"/\">\n                    <Upload/>\n                    </Route>\n\n                </Switch>\n            </div>\n        </Router>\n    );\n\n}\n\nfunction Home() {\n\n    return (\n        <div>\n            <h2>Home</h2>\n            <Button type='primary'> fuck</Button>\n        </div>\n\n    );\n}\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}